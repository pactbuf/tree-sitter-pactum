===
imports
===
import _ "pact"
import "pact"
import alias "pact"
---

(source_file
	(import_definition
		(no_prefix_keyword)
		(import_path))
	(import_definition
		(import_path))
	(import_definition
		(identifier)
		(import_path)))

===
imports group
===
import (
  _ "pact"
 "pact"
	alias "pact"
)
---

(source_file
	(import_definition
		(no_prefix_keyword)
		(import_path)
		(import_path)
		(identifier)
		(import_path)))

===
options
===
#path.to.option = "literal"
#some_option = true
#boolean = false
#integer = 1
#negative = -1
#float = 1.2
#float_negative = -1.2
#list_empty = []
#list_simple = [1 1.2 "string literal", [1 2] true [false]]
#object = {
  "string" = "value",
	"integer" = 1
	"float" = -12.1
	"list" = [true, false],
	"object_empty" = {}
	"object_full" = {"a" = 1, "b" = []}
}
#flag_value
r#group {
  s#shared_option = false
  unnecessary_option {
	  value = {"a" = 1}
	}
	selector {
	  value = {"b" = false}
	}
	"raw_option" = {
	  "value" = {"c" = 1.2}
	}
}

# {
  value = 1
}
r# {
  value = 1
}
s# {
  value = 1
}
---

(source_file
	(module_option_definition
		(option_node
			(option_key
				(identifier)
				(identifier)
				(identifier))
			(value
				(string))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value)))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value)))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(integer))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(integer))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(float))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(float))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(value_array))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(value_array
					(value
						(integer))
					(value
						(float))
					(value
						(string))
					(value
						(value_array
							(value
								(integer))
							(value
								(integer))))
					(value)
					(value
						(value_array
							(value)))))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(value_object
					(string)
					(value
						(string))
					(string)
					(value
						(integer))
					(string)
					(value
						(float))
					(string)
					(value
						(value_array
							(value)
							(value)))
					(string)
					(value
						(value_object))
					(string)
					(value
						(value_object
							(string)
							(value
								(integer))
							(string)
							(value
								(value_array))))))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(option_node
				(option_key
					(identifier))
				(value))
			(option_node
				(option_key
					(identifier))
				(option_node
					(option_key
						(identifier))
					(value
						(value_object
							(string)
							(value
								(integer))))))
			(option_node
				(option_key
					(identifier))
				(option_node
					(option_key
						(identifier))
					(value
						(value_object
							(string)
							(value)))))
			(option_node
				(option_key_literal)
				(value
					(value_object
						(string)
						(value
							(value_object
								(string)
								(value
									(float)))))))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(integer))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(integer))))
	(module_option_definition
		(option_node
			(option_key
				(identifier))
			(value
				(integer)))))

===
message
===

message Empty {}

message User {
  id: string,
	name: string = 2,
	tags: list<string>,
	context: map<string, string>,
	age: i32 #required #openapi { name = "Age" }
}

message User {
  #openapi.name = "Apple"

	#openapi {
	  description = "Ubuntu"
	},

	r# {
	  openapi {
		  name = "Apple"
		}
	}

	id: string = 1 {}
	tags: list<string>,
}

message (
  MessageOne {}
	MessageTwo { #openapi{ name = "message two" } }
)
---

(source_file
	(message_definition
		(identifier))
	(message_definition
		(identifier)
		(field_definition
			(identifier)
			(field_type
				(identifier)))
		(field_definition
			(identifier)
			(field_type
				(identifier))
			(field_tag))
		(field_definition
			(identifier)
			(field_type
				(identifier)))
		(field_definition
			(identifier)
			(field_type
				(identifier)
				(identifier)))
		(field_definition
			(identifier)
			(field_type
				(identifier)))
		(option_node
			(option_key
				(identifier)))
		(option_node
			(option_key
				(identifier))
			(option_node
				(option_key
					(identifier))
				(value
					(string)))))
	(message_definition
		(identifier)
		(option_node
			(option_key
				(identifier)
				(identifier))
			(value
				(string)))
		(option_node
			(option_key
				(identifier))
			(option_node
				(option_key
					(identifier))
				(value
					(string))))
		(option_node
			(option_key
				(identifier))
			(option_node
				(option_key
					(identifier))
				(value
					(string))))
		(field_definition
			(identifier)
			(field_type
				(identifier))
			(field_tag))
		(field_definition
			(identifier)
			(field_type
				(identifier))))
	(message_definition
		(identifier)
		(identifier)
		(option_node
			(option_key
				(identifier))
			(option_node
				(option_key
					(identifier))
				(value
					(string))))))

===
enum
===

enum UserType {
  #regular_option = 1
	s#shared_option = 1.2
	r#raw_option = false
	s# {
	  "pact.io/json" {
		  name = "shared"
		}
	}

	Unknown = 0,
	A,
	B = 100 #required #max=1,
	C {
    option = 1
		s#shared_option
	},
	D
}

---

(source_file
	(enum_definition
		(identifier)
		(option_node
			(option_key
				(identifier))
			(value
				(integer)))
		(option_node
			(option_key
				(identifier))
			(value
				(float)))
		(option_node
			(option_key
				(identifier))
			(value))
		(option_node
			(option_key_literal)
			(option_node
				(option_key
					(identifier))
				(value
					(string))))
		(enum_value)
		(enum_value)
		(enum_value)
		(option_node
			(option_key
				(identifier)))
		(option_node
			(option_key
				(identifier))
			(value
				(integer)))
		(enum_value)
		(option_node
			(option_key
				(identifier))
			(value
				(integer)))
		(option_node
			(option_key
				(identifier)))
		(enum_value)))

===
enum group
===

enum (
  UserType {}

  EnumType {
	  Unknown, A, B, C
	}
)

---

(source_file
	(enum_definition
		(identifier)
		(identifier)
		(enum_value)
		(enum_value)
		(enum_value)
		(enum_value)))

===
interface
===

interface User {
  #openapi.operation = "User Operation"
	#grpc.ignore,
	#ws.ignore

  Ping();
	CheckHealth() #http.ignore r#"pactus.io/is-operation";
	WaitForSomething() -> stream Something #required;
	WaitForSomething() -> (stream Something) #required;
	Create(CreateRequest) -> (CreateResponse);
	Create(stream CreateRequest) -> (stream CreateResponse);
	Create(stream CreateRequest) -> stream CreateResponse {
	  openapi.operation = "Something"
	}
	Create() {
		s#shared_option {
			shared
		}
	}
}

interface (
  InterfaceOne {
	}

	InterfaceTwo {
	  Ping();
	}
)

---

(source_file
	(interface_definition
		(identifier)
		(option_node
			(option_key
				(identifier)
				(identifier))
			(value
				(string)))
		(option_node
			(option_key
				(identifier)
				(identifier)))
		(option_node
			(option_key
				(identifier)
				(identifier)))
		(func_definition
			(identifier))
		(func_definition
			(identifier))
		(option_node
			(option_key
				(identifier)
				(identifier)))
		(option_node
			(option_key_literal))
		(func_definition
			(identifier)
			(func_param
				(identifier)))
		(option_node
			(option_key
				(identifier)))
		(func_definition
			(identifier)
			(func_param
				(identifier)))
		(option_node
			(option_key
				(identifier)))
		(func_definition
			(identifier)
			(func_param
				(identifier))
			(func_param
				(identifier)))
		(func_definition
			(identifier)
			(func_param
				(identifier))
			(func_param
				(identifier)))
		(func_definition
			(identifier)
			(func_param
				(identifier))
			(func_param
				(identifier)))
		(option_node
			(option_key
				(identifier)
				(identifier))
			(value
				(string)))
		(func_definition
			(identifier))
		(option_node
			(option_key
				(identifier))
			(option_node
				(option_key
					(identifier)))))
	(interface_definition
		(identifier)
		(identifier)
		(func_definition
			(identifier))))
